{
  "version": 3,
  "sources": ["/Users/jcorbin/borkshop-js/packages/jspit/src/dla.ts"],
  "sourcesContent": ["import {html, render} from 'lit-html';\nimport {readHashVar, setHashVar} from './state';\nimport {TileGrid} from './tiles';\nimport {KeyMap, coalesceMoves} from './input';\nimport {everyFrame, schedule} from './anim';\nimport {show as showUI, Bindings as UIBindings} from './ui';\n\nexport class DLA {\n  static demoName = 'DLA'\n  static demoTitle = 'Diffusion Limited Aggregation'\n\n  // rate at which to coalesce and process movement input\n  static inputRate = 100\n\n  // proportion to scroll viewport by when at goes outside\n  static nudgeBy = 0.2\n\n  static dropAfter = 0\n  static genRate   = 1\n  static playRate  = 100\n  static initBase  = 0\n  static initArc   = 2.0\n  static turnLeft  = 0.5\n  static turnRight = 0.5\n  static stepLimit = 50\n\n  static clampMoves     = false\n  static trackClampDebt = true\n\n  static inputs:{[name: string]: HTMLInputElement} = {}\n\n  static bindSettings(getInput:(name:string)=>HTMLInputElement|null) {\n    DLA.bindSetting('dropAfter',     getInput('dropAfter'));\n    DLA.bindSetting('initBase',      getInput('initBase'));\n    DLA.bindSetting('initArc',       getInput('initArc'));\n    DLA.bindSetting('turnLeft',      getInput('turnLeft'));\n    DLA.bindSetting('turnRight',     getInput('turnRight'));\n    DLA.bindSetting('genRate',       getInput('genRate'));\n    DLA.bindSetting('playRate',      getInput('playRate'));\n    DLA.bindSetting('stepLimit',     getInput('stepLimit'));\n    DLA.bindToggle('clampMoves',     getInput('clampMoves'));\n    DLA.bindToggle('trackClampDebt', getInput('trackClampDebt'));\n  }\n\n  static bindToggle(name:'clampMoves'|'trackClampDebt', input:HTMLInputElement|null) {\n    if (input) DLA.inputs[name] = input;\n    const update = (enabled:boolean):boolean => {\n      setHashVar(name, enabled ? 'true' : 'false');\n      DLA[name] = enabled;\n      return enabled;\n    };\n    const value = update((readHashVar(name) || DLA[name].toString()).toLowerCase() === 'true');\n    if (input) {\n      input.checked = value;\n      input.addEventListener('change', () => update(input.checked));\n    }\n  }\n\n  static bindSetting(name:'dropAfter'|'initBase'|'initArc'|'turnLeft'|'turnRight'|'genRate'|'playRate'|'stepLimit', input:HTMLInputElement|null) {\n    if (input) DLA.inputs[name] = input;\n    const update = (value:string|null):string|null => {\n      const given = value !== null;\n      if (!given) value = DLA[name].toString();\n      setHashVar(name, value);\n      if (given) DLA[name] = parseFloat(value || '');\n      return value;\n    };\n    const value = update(readHashVar(name));\n    if (input) {\n      input.value = value || '';\n      input.addEventListener('change', () => input.value = update(input.value) || '');\n    }\n  }\n\n  particleID = 0\n\n  grid: TileGrid\n\n  constructor(grid:TileGrid) {\n    this.grid = grid;\n    this.grid.clear();\n    this.grid.createTile(`particle-${++this.particleID}`, {\n      tag: ['particle', 'init'],\n      bg: 'var(--particle-bg)',\n      fg: 'var(--particle-dead)',\n      text: '.',\n    });\n    this.grid.centerViewOn({x: 0, y: 0});\n  }\n\n  elapsed = 0\n\n  dropPlayer() {\n    this.grid.createTile('at', {\n      text: '@',\n      tag: ['solid', 'mind', 'keyMove'],\n      fg: 'var(--dla-player)',\n      pos: {x: 0, y: 0},\n    });\n  }\n\n  update(dt:number): void {\n    const havePlayer = !!this.grid.queryTiles('keyMove').length;\n\n    if (DLA.dropAfter && this.particleID > DLA.dropAfter && !havePlayer) this.dropPlayer();\n\n    const rate = havePlayer ? DLA.playRate : DLA.genRate;\n    this.elapsed += dt\n    const n = Math.min(DLA.stepLimit, Math.floor(this.elapsed / rate));\n    if (!n) return;\n    this.elapsed -= n * rate;\n    let ps = this.grid.queryTiles('particle', 'live');\n    const spawn = () => {\n      const heading = Math.PI * (DLA.initBase + (Math.random() - 0.5) * DLA.initArc);\n\n      const p = this.grid.createTile(`particle-${++this.particleID}`, {\n        tag: ['particle', 'live'],\n        fg: 'var(--particle-live)',\n        text: '*',\n        data: {heading},\n      });\n      ps.push(p);\n    };\n    for (let i = 0; i < n; ++i) {\n      ps = ps.filter(p => p.classList.contains('live'));\n      if (!ps.length) {\n        spawn();\n        continue;\n      }\n\n      for (const p of ps) {\n        let heading = this.grid.getTileData(p, 'heading');\n        if (typeof heading !== 'number') heading = 0;\n\n        const adj = Math.random() * (DLA.turnLeft + DLA.turnRight) - DLA.turnLeft;\n        heading += Math.PI * adj;\n        heading %= 2 * Math.PI;\n        this.grid.setTileData(p, 'heading', heading);\n\n        let dx = Math.cos(heading);\n        let dy = Math.sin(heading);\n        const pos = this.grid.getTilePosition(p);\n\n        if (DLA.clampMoves) {\n          if (DLA.trackClampDebt) {\n            const prior = this.grid.getTileData(p, 'prior');\n            if (prior !== null && typeof prior === 'object' && !Array.isArray(prior)) {\n              if (typeof prior.x === 'number') dx += prior.x;\n              if (typeof prior.y === 'number') dy += prior.y;\n            }\n          }\n\n          if (Math.abs(dy) > Math.abs(dx)) {\n            if (dy < 0) pos.y++, dy++;\n            else        pos.y--, dy--;\n          } else {\n            if (dx < 0) pos.x++, dx++;\n            else        pos.x--, dx--;\n          }\n\n          if (DLA.trackClampDebt)\n            this.grid.setTileData(p, 'prior', {x: dx, y: dy});\n        } else {\n          // particles move smoothly, taking fractional positions\n          pos.x += dx;\n          pos.y += dy;\n        }\n\n        if (!this.grid.tilesAt(pos, 'particle').length) {\n          pos.x = Math.floor(pos.x);\n          pos.y = Math.floor(pos.y);\n          this.grid.updateTile(p, {\n            tag: ['particle'],\n            bg: 'var(--particle-bg)',\n            fg: 'var(--particle-dead)',\n            text: '.',\n            pos,\n            data: {},\n          });\n        } else {\n          this.grid.moveTileTo(p, pos);\n          if (!this.grid.queryTiles('keyMove').length) this.grid.nudgeViewTo(pos, 0.2);\n        }\n      }\n    }\n  }\n\n  digSeq = new Map<string, number>()\n\n  consumeInput(presses: Array<[string, number]>):void {\n    const movers = this.grid.queryTiles('keyMove');\n    if (!movers.length) return;\n    if (movers.length > 1) throw new Error(`ambiguous ${movers.length}-mover situation`);\n    const actor = movers[0];\n\n    let {have, move} = coalesceMoves(presses);\n    if (!have) return;\n\n    const pos = this.grid.getTilePosition(actor);\n    const targ = {x: pos.x + move.x, y: pos.y + move.y};\n\n    // solid actors subject to collison\n    if (actor.classList.contains('solid')) {\n      const hits = this.grid.tilesAt(targ);\n\n      if (!hits.length) {\n        // place particles in the void\n        const aid = actor.id;\n        const did = (this.digSeq.get(aid) || 0) + 1;\n        this.digSeq.set(aid, did);\n        this.grid.createTile(`particle-placed-${aid}-${did}`, {\n          tag: ['particle'],\n          bg: 'var(--particle-bg)',\n          fg: 'var(--dla-player)',\n          text: '.',\n          pos: targ,\n        });\n      } else {\n        // can only move there if have particle support\n        if (!hits.some((h) => h.classList.contains('particle'))) return;\n      }\n    }\n\n    this.grid.moveTileTo(actor, targ);\n    this.grid.nudgeViewTo(targ, DLA.nudgeBy);\n  }\n\n  running = false\n\n  run(\n    readKeys:() => Array<[string, number]>,\n    update?:(dt:number) => void,\n  ) {\n\n    this.running = true;\n    everyFrame(schedule(\n      () => this.running,\n\n      {every: DLA.inputRate, then: () => {\n        this.consumeInput(readKeys());\n        return true;\n      }},\n\n      // TODO hoist dynamic tick rate into into anim.schedule\n      // {every: () => this.rate, then: (dn) => {\n      // }),\n\n      (dt:number) => {\n        this.update(dt);\n        if (update) update(dt);\n        return true;\n      },\n    ));\n  }\n}\n\n// injected DOM parts\ninterface Bindings extends UIBindings {\n  keys: HTMLElement,\n  run: HTMLButtonElement,\n  reset: HTMLButtonElement,\n  dropPlayer: HTMLButtonElement,\n}\nexport const bound:Partial<Bindings> = {};\n\n// simulation / \"game\" state and dependencies\ninterface State {\n  grid: TileGrid,\n  keys: KeyMap,\n  world: DLA,\n}\nexport const state:Partial<State> = {};\n\nexport function init(bind:Bindings) {\n  Object.assign(bound, bind);\n\n  if (bound.grid) state.grid = new TileGrid(bound.grid);\n  if (bound.keys) state.keys = new KeyMap(bound.keys, (ev:KeyboardEvent):boolean => {\n    if (ev.key === 'Escape') {\n      if (ev.type === 'keydown') playPause();\n      return false;\n    }\n    if (bound.menu?.style.display !== 'none') return false;\n    return !ev.altKey && !ev.ctrlKey && !ev.metaKey;\n  });\n\n  bound.run?.addEventListener('click', playPause);\n  bound.reset?.addEventListener('click', () => {\n    if (state.world) state.world.running = false;\n    state.world = undefined;\n    if (bound.reset) bound.reset.disabled = true;\n    showUI(bound, false, false);\n  });\n  bound.dropPlayer?.addEventListener('click', () => {\n    if (state.world) {\n      if (bound.dropPlayer) bound.dropPlayer.disabled = true;\n      state.world.dropPlayer();\n    }\n  });\n\n  DLA.bindSettings((name:string) => bound.menu?.querySelector(`input[name=\"${name}\"]`) || null);\n\n  showUI(bound, false, false);\n}\n\nfunction playPause() {\n  if (!state.grid) return;\n\n  showUI(bound, true, !state.world?.running);\n\n  if (!state.world) {\n    state.world = new DLA(state.grid);\n    if (bound.dropPlayer) bound.dropPlayer.disabled = false;\n    if (bound.reset) bound.reset.disabled = false;\n  }\n\n  const {world, keys} = state;\n  if (world.running) world.running = false;\n  else world.run(\n    () => keys?.consumePresses() || [],\n    () => bound.foot && render(html`\n        <label for=\"particleID\">Particles:</label>\n        <span id=\"particleID\">${world.particleID}</span>\n      `, bound.foot));\n}\n"],
  "mappings": "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",
  "names": []
}
