{
  "version": 3,
  "sources": ["/Users/jcorbin/borkshop-js/packages/jspit/src/config.ts"],
  "sourcesContent": ["import {readHashVar, setHashVar} from './state';\n\nexport type Datum =\n  | boolean\n  | string\n  | number\n  | Datum[]\n  | Data\n\nexport interface Data {\n  [name: string]: Datum\n}\n\nfunction parseBoolean(s:string):boolean|null {\n  switch (s.toLowerCase()) {\n    case 't':\n    case 'true':\n      return true;\n    case 'f':\n    case 'false':\n      return false;\n  }\n  return null;\n}\n\ninterface Accessors {\n  getInput(name:string): HTMLInputElement|null;\n  getSelect(name:string): HTMLSelectElement|null;\n}\n\nexport function bindVars({data, ...acc}:Accessors&{\n  data:Data,\n}) {\n  for (const name in data) {\n    bindVar({\n      ...acc,\n      name,\n      load: () => data[name],\n      save: (v:Datum) => data[name] = v,\n    });\n  }\n}\n\nfunction bindVar({name, load, save, getInput, getSelect}:Accessors&{\n  name: string,\n  load: () => any,\n  save: (_:any) => void,\n}) {\n  const value = load();\n  const {stov, vtos} = tossers(value);\n  switch (typeof value) {\n\n  case 'string':\n    hookupInput({\n      name,\n      input: getInput(name),\n      load, save,\n      stov, vtos,\n      read: (i:HTMLInputElement) => i.value,\n      write: (i:HTMLInputElement, v:any) => i.value = typeof v === 'string' ? v : v.toString(),\n    });\n    break;\n\n  case 'number':\n    hookupInput({\n      name,\n      input: getInput(name),\n      load, save,\n      stov, vtos,\n      read: (i:HTMLInputElement) => i.valueAsNumber,\n      write: (i:HTMLInputElement, v:any) => i.valueAsNumber = typeof v === 'number' ? v : NaN,\n    });\n    break;\n\n  case 'boolean':\n    hookupInput({\n      name,\n      input: getInput(name),\n      load, save,\n      stov, vtos,\n      read: (i:HTMLInputElement) => i.checked,\n      write: (i:HTMLInputElement, v:any) => i.checked = typeof v === 'boolean' ? v : false,\n    });\n    break;\n\n  // TODO structured Array/list support? object/table?\n\n  case 'object':\n\n    if (value.value !== undefined && value.options !== undefined) {\n      const {stov, vtos} = tossers(value.value);\n      hookupSelect({\n        name,\n        select: getSelect(name),\n        options: value.options,\n        load: () => load().value,\n        save: (value:any) => save({value, options: load().options}),\n        stov, vtos,\n      });\n      return;\n    }\n\n    hookupInput({\n      name,\n      input: getInput(name),\n      load, save,\n      stov, vtos,\n      read: (i:HTMLInputElement) => {\n        try {\n          return JSON.parse(i.value);\n        } catch (e) {\n          return null;\n        }\n      },\n      write: (i:HTMLInputElement, v:any) => i.value = JSON.stringify(v),\n    });\n  }\n}\n\nfunction hookupInput({\n  name, input,\n  load, save,\n  stov, vtos,\n  read, write,\n}:{\n  name: string,\n  input: HTMLInputElement|null,\n  load: () => any,\n  save: (_:any) => void,\n  read: (i:HTMLInputElement) => any, // TODO can fail\n  write: (i:HTMLInputElement, v:any) => void,\n}&Tossers) {\n  const update = (value:any) => {\n    const given = value !== null && value !== undefined;\n    if (!given) value = load();\n    setHashVar(name, vtos(value));\n    if (given) save(value);\n    if (input) write(input, value);\n  };\n  if (input) input.addEventListener('change', () => update(read(input)));\n  const value = readHashVar(name);\n  update(value === null ? load() : stov(value));\n}\n\nfunction hookupSelect({\n  name, select,\n  options,\n  load, save,\n  stov, vtos,\n}:{\n  name: string,\n  select: HTMLSelectElement|null,\n  options: string|{\n    value: string,\n    label?: string,\n  }[],\n  load: () => any,\n  save: (_:any) => void,\n}&Tossers) {\n  const update = (value:any) => {\n    const given = value !== null && value !== undefined;\n    if (!given) value = load();\n    setHashVar(name, vtos(value));\n    if (given) save(value);\n    if (select) select.value = value;\n  };\n  if (select) {\n    while (select.options.length) select.remove(0);\n    for (const opt of options) {\n      if (typeof opt === 'string') {\n        select.add(new Option(opt, opt));\n      } else {\n        const {label, value} = opt;\n        select.add(new Option(label, value === undefined ? label : value));\n      }\n    }\n    select.addEventListener('change', () => update(stov(select.value)));\n  }\n  const value = readHashVar(name);\n  update(value === null ? load() : stov(value));\n}\n\ninterface Tossers {\n  stov(s:string): any;\n  vtos(v:any): string;\n}\n\nfunction tossers(value:Datum):Tossers {\n  switch (typeof value) {\n    case 'string':\n      return {\n        stov: (s:string) => s,\n        vtos: (v:any)    => typeof v === 'string' ? v : v.toString(),\n      };\n\n    case 'number':\n      return {\n        stov: (s:string) => s ? parseFloat(s) : null,\n        vtos: (v:any)    => typeof v === 'number' ? v.toString() : '',\n      };\n\n    case 'boolean':\n      return {\n        stov: (s:string) => s ? parseBoolean(s) : null,\n        vtos: (v:any)    => typeof v === 'boolean' ? v.toString() : '',\n      };\n\n    case 'object':\n      return {\n        stov: (s:string) => JSON.parse(s),\n        vtos: (v:any)    => JSON.stringify(v),\n      };\n\n    default:\n      throw new Error(`unupported ${name} setting of type ${typeof value}`);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
