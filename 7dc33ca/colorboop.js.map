{
  "version": 3,
  "sources": ["/Users/jcorbin/borkshop-js/packages/jspit/src/colorboop.ts"],
  "sourcesContent": ["import {TileGrid, TileInspector, TileSpec} from './tiles';\nimport {KeyMap, coalesceMoves} from './input';\nimport {everyFrame, schedule} from './anim';\nimport {show as showUI, Bindings as UIBindings} from './ui';\n\nexport class ColorBoop {\n  static demoName = 'ColorBoop'\n  static demoTitle = 'Boop a color, get a color'\n\n  // rate at which to coalesce and process movement input\n  static inputRate = 100\n\n  // proportion to scroll viewport by when at goes outside\n  static nudgeBy = 0.2\n\n  colors = [\n    'black',\n    'darker-grey',\n    'dark-grey',\n    'grey',\n    'light-grey',\n    'lighter-grey',\n    'white',\n    'dark-white',\n    'blue',\n    'bright-purple',\n    'cyan',\n    'dark-orange',\n    'dark-sea-green',\n    'green',\n    'light-cyan',\n    'magenta',\n    'orange',\n    'purple',\n    'red',\n    'red-orange',\n    'yellow',\n    'yellow-orange',\n  ]\n\n  grid : TileGrid\n\n  constructor(grid:TileGrid) {\n    this.grid = grid;\n    this.grid.clear();\n    this.grid.createTile('at', {\n      text: '@',\n      tag: ['solid', 'mind', 'keyMove'],\n      pos: {x: 10, y: 10},\n    });\n    this.colors.forEach((color, i) => {\n      this.grid.createTile(`fg-swatch-${color}`, {\n        fg: `var(--${color})`,\n        tag: ['solid', 'swatch', 'fg'],\n        text: '$',\n        pos: {x: 5, y: i},\n      });\n      this.grid.createTile(`bg-swatch-${color}`, {\n        bg: `var(--${color})`,\n        tag: ['solid', 'swatch', 'bg'],\n        text: '$',\n        pos: {x: 15, y: i},\n      });\n    });\n    this.grid.centerViewOn({x: 10, y: 10});\n  }\n\n  consumeInput(presses: Array<[string, number]>):boolean {\n    const movers = this.grid.queryTiles({tag: 'keyMove'});\n    if (!movers.length) return false;\n    if (movers.length > 1) throw new Error(`ambiguous ${movers.length}-mover situation`);\n    const actor = movers[0];\n\n    let {have, move} = coalesceMoves(presses);\n    if (!have) return false;\n\n    const pos = this.grid.getTilePosition(actor);\n    const targ = {x: pos.x + move.x, y: pos.y + move.y};\n\n    // solid tiles collide\n    if (actor.classList.contains('solid')) {\n      const hits = this.grid.tilesAt(targ, 'solid');\n      if (hits.length) {\n        for (const hit of hits) if (hit.classList.contains('swatch')) {\n          const spec : TileSpec = {};\n          if      (hit.classList.contains('fg')) spec.fg = hit.style.color;\n          else if (hit.classList.contains('bg')) spec.bg = hit.style.backgroundColor;\n          this.grid.updateTile(actor, spec)\n        }\n        return true;\n      }\n    }\n\n    this.grid.moveTileTo(actor, targ);\n    this.grid.nudgeViewTo(targ, ColorBoop.nudgeBy);\n    return true;\n  }\n\n  running = false\n\n  run(\n    readKeys:() => Array<[string, number]>,\n    updated:(grid:TileGrid)=>void,\n  ) {\n    if (this.running) return;\n    this.running = true;\n    everyFrame(schedule(\n      () => this.running,\n      {every: ColorBoop.inputRate, then: () => {\n        if (this.consumeInput(readKeys())) updated(this.grid);\n        return true;\n      },\n    }));\n  }\n}\n\n// injected DOM parts\ninterface Bindings extends UIBindings {\n  grid: HTMLElement,\n  status: HTMLElement\n  keys: HTMLElement\n  run: HTMLButtonElement\n  reset: HTMLButtonElement\n  inspect: HTMLElement\n}\nexport const bound:Partial<Bindings> = {};\n\n// simulation / \"game\" state and dependencies\ninterface State {\n  grid: TileGrid,\n  keys: KeyMap,\n  world: ColorBoop,\n}\nexport const state:Partial<State> = {};\n\nimport {html, render} from 'lit-html';\n\nexport function init(bind:Bindings) {\n  Object.assign(bound, bind);\n\n  if (bound.grid) {\n    state.grid = new TileGrid(bound.grid);\n    new TileInspector(state.grid, ({pos, tiles}) => {\n      if (bound.inspect) render(tiles.length\n        ? html`@${pos.x},${pos.y} ${tiles.map(({id}) => id)}`\n        : html`// mouse-over a tile to inspect it`,\n        bound.inspect)\n    });\n  }\n\n  if (bound.keys) state.keys = new KeyMap(bound.keys, (ev:KeyboardEvent):boolean => {\n    if (ev.key === 'Escape') {\n      if (ev.type === 'keydown') playPause();\n      return false;\n    }\n    if (!state.world?.running) return false;\n    return !ev.altKey && !ev.ctrlKey && !ev.metaKey;\n  });\n\n  bound.run?.addEventListener('click', playPause);\n  bound.reset?.addEventListener('click', () => {\n    if (state.world) state.world.running = false;\n    state.world = undefined;\n    if (bound.reset) bound.reset.disabled = true;\n    showUI(bound, false, false);\n  });\n\n  showUI(bound, false, false);\n}\n\nfunction playPause() {\n  if (!state.grid) return;\n\n  showUI(bound, true, !state.world?.running);\n\n  if (!state.world) {\n    state.world = new ColorBoop(state.grid);\n    if (bound.reset) bound.reset.disabled = false;\n  }\n\n  const {world, grid, keys} = state;\n  if (world.running) world.running = false;\n  else world.run(\n    () => keys?.consumePresses() || [],\n    () => {\n      if (!grid || !bound.status) return;\n      const at = grid.getTile('at');\n      if (!at) {\n        render(html`no player`, bound.status);\n        return;\n      }\n      const {x, y} = grid.getTilePosition(at);\n      const {x: w, y: h} = grid.tileSize;\n      const {x: vx, y: vy, width: vw, height: vh} = grid.viewport;\n      render(html`\n        player@${x},${y}+${w}+${h} view@${vx},${vy}+${Math.floor(vw)}+${Math.floor(vh)}\n      `, bound.status);\n    });\n}\n"],
  "mappings": "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",
  "names": []
}
